Person sinifimiz Java Bean yapisina sahip olacak . Burada dikkat edilmesi gereken nokta Person sinifinin varsayilan yapilandiricisi mutlaka tanimlanmalidir.

Servlet sinifimizda ,request scope’a Person objesini ekledik.

req.setAttribute("myperson",person1);
JSP dosyamizda , request implicit objemiz uzerinden “myperson” attribute’ine ulastik.

UseBeanRequestImplicit servlet’imizi calistiralim;

Person objemiz request scope eklendikten sonra requestImplicit.jsp sayfasina request dispatch yapildi.
requestImplicit.jsp sayfasinda request implicit objesi ile bu request objesine ulastik.
<jsp:useBean> 

<jsp:useBean> action’i ilgili sinif tipinde ilgili scope’ta obje varsa ulasabiliriz. Eger obje yoksa <jsp:useBean> action’i yeni bir obje olusturacaktir.

UseBeanProperty sinifimizda Person objemizi request scope’a attribute olarak ekliyoruz.
Daha sonrasinda useBean.jsp dosyamiza dispatch islemi yapiyoruz.
	<jsp:useBean id="myperson" class="_10_UseBean.model.Person" scope="request">

	</jsp:useBean>
id alanina “myperson”  ismi verdik , bu UseBeanProperty servlet sinifimizda request scope a ekledigimiz Person objesinin attribute ismi.
Ayni id ismini birden fazla kullanamayiz , bu durumda derleme hatasi verir ; Duplicate local variable
class alanina Person sinifimizi yazdik.Burada packagename.classname olacak sekilde yazmamiz gerekli.
<jsp:useBean> icin varsayilan scope “page” scope/yasam alanidir. Servlet sinifimizda request scope’una attribute eklendigi icin burada da scope olarak request belirttik.